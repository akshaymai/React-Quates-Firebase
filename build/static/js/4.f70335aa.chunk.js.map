{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","components/pages/quoetsdetails.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComments","useEffect","submitFormHandler","event","preventDefault","commentData","text","current","value","quetoId","quoetId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedcomments","data","addcommentshandler","useCallback","length","onClick","HighlightedQuote","quote","author","QueotesDetails","match","useRouteMatch","getSingleQuote","getSinglequotes","path","exact","url"],"mappings":"mIAAA,mCAiBeA,IAdO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAG,cAAcH,UAAU,MAAjC,8B,mBCNNI,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,yIC2CXC,EArCQ,SAACC,GACtB,IAAMC,EAAiBC,mBAIvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MACrBC,EAAoBR,EAApBQ,gBACRC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBACNP,EAAY,CAAEQ,YAAY,CAACC,KAAMb,EAAec,QAAQC,OAAQC,QAASjB,EAAMkB,UAC/EjB,EAAec,QAAQC,MAAM,IAG/B,OACE,uBAAMvB,UAAWC,IAAQyB,KAAMC,SAAUV,EAAzC,UACc,YAAXJ,GACC,qBAAKb,UAAU,WAAf,SACE,cAAC4B,EAAA,EAAD,MAGJ,sBAAK5B,UAAWC,IAAQ4B,QAASF,SAAUV,EAA3C,UACE,uBAAOa,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKzB,OAEvC,qBAAKR,UAAWC,IAAQiC,QAAxB,SACE,wBAAQlC,UAAU,MAAlB,+B,iBC5BOmC,EARK,SAAC5B,GACnB,OACE,oBAAIP,UAAWC,IAAQmC,KAAvB,SACE,4BAAI7B,EAAMc,U,iBCQDgB,EAVM,SAAC9B,GACpB,OACE,oBAAIP,UAAWC,IAAQqC,SAAvB,SACG/B,EAAM+B,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BnB,KAAMmB,EAAQnB,MAA1BmB,EAAQT,UC0DnBU,EAvDE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACMC,EAASC,cACf,EAAsDpC,YAAQqC,KAAtDnC,EAAR,EAAQA,YAAmBoC,EAA3B,EAAqBC,KAAsBpC,EAA3C,EAA2CA,OAE3CG,qBAAU,WACRJ,EAAYiC,EAAOd,MAClB,CAACc,EAAOd,GAAInB,IAEf,IAQI0B,EAJEY,EAAqBC,uBAAY,WACrCvC,EAAYiC,EAAOd,MAClB,CAACnB,EAAaiC,EAAOd,KAqBxB,MAlBe,YAAXlB,IACFyB,EACE,qBAAKtC,UAAU,WAAf,SACE,cAAC4B,EAAA,EAAD,OAIS,cAAXf,GAA0BmC,GAAkBA,EAAeI,OAAS,IACtEd,EAAW,cAAC,EAAD,CAAcA,SAAUU,KAIxB,cAAXnC,GACEmC,GAA4C,IAA1BA,EAAeI,SAEnCd,EAAW,mBAAGtC,UAAU,WAAb,gCAIX,0BAASA,UAAWC,IAAQqC,SAA5B,UACE,gDACEK,GACA,wBAAQ3C,UAAU,MAAMqD,QA/BC,WAC7BT,GAAmB,IA8Bf,2BAIDD,GACC,cAAC,EAAD,CACElB,QAASoB,EAAOd,GAChBhB,gBAAiBmC,IAGpBZ,M,iBCjDQgB,EATU,SAAC/C,GACxB,OACE,yBAAQP,UAAWC,IAAQsD,MAA3B,UACE,4BAAIhD,EAAMc,OACV,qCAAad,EAAMiD,a,QCgEVC,UA7DQ,WACrB,IAAMC,EAAQC,cACN5B,EAAOe,cAAPf,GACR,EAKIrB,YAAQkD,KAAgB,GAJ1BhD,EADF,EACEA,YACAC,EAFF,EAEEA,OACMgD,EAHR,EAGEZ,KACAnC,EAJF,EAIEA,MAOF,OAJAE,qBAAU,WACRJ,EAAYmB,KACX,CAACA,EAAInB,IAEO,YAAXC,EAEA,qBAAKb,UAAU,WAAf,SACE,cAAC4B,EAAA,EAAD,MAIFd,EACK,mBAAGd,UAAU,mBAAb,SAAiCc,IAE3B,cAAXD,GAA2BgD,EAAgBxC,KAe7C,eAAC,WAAD,WACE,cAAC,EAAD,CACEA,KAAMwC,EAAgBxC,KACtBmC,OAAQK,EAAgBL,SAG1B,cAAC,IAAD,CAAOM,KAAMJ,EAAMI,KAAMC,OAAK,EAA9B,SACE,qBAAK/D,UAAU,WAAf,SACE,cAAC,IAAD,CAAMG,GAAE,UAAKuD,EAAMM,IAAX,aAA2BhE,UAAU,YAA7C,+BAMJ,cAAC,IAAD,CAAO8D,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SAEE,cAAC,EAAD,SA9BG,cAAC/D,EAAA,EAAD","file":"static/js/4.f70335aa.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/add/queots\" className=\"btn\">\n      Add a Quote\n      </Link>\n      {/* <a className='btn'>\n \n      </a> */}\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport { addComment } from \"../lib/api\";\nimport useHttp from \"../Hooks/use-http\"; \nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  // const history = useHistory();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComments } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComments();\n    }\n  }, [status, error, onAddedComments]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    sendRequest({ commentData:{text: commentTextRef.current.value },quetoId: props.quoetId});\n    commentTextRef.current.value=\"\"\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { getAllComments } from \"../lib/api\";\nimport useHttp from \"../Hooks/use-http\";\nimport {  useParams } from \"react-router-dom\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { sendRequest, data: loadedcomments, status } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(params.id);\n  }, [params.id, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  \n  const addcommentshandler = useCallback(() => {\n    sendRequest(params.id);\n  }, [sendRequest, params.id]);\n  \n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedcomments && loadedcomments.length > 0) {\n    comments = <CommentsList comments={loadedcomments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedcomments || loadedcomments.length === 0 )\n  ) {\n    comments = <p className=\"centered\">No comments found</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoetId={params.id}\n          onAddedComments={addcommentshandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { Fragment, useEffect } from \"react\";\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../comments/Comments\";\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\nimport { getSingleQuote } from \"../lib/api\";\nimport useHttp from \"../Hooks/use-http\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport NoQuotesFound from \"../quotes/NoQuotesFound\";\n\nconst QueotesDetails = () => {\n  const match = useRouteMatch();\n  const { id } = useParams();\n  const {\n    sendRequest,\n    status,\n    data: getSinglequotes,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(id);\n  }, [id, sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n  if (status === \"completed\" && !getSinglequotes.text) {\n    return <NoQuotesFound />;\n  }\n\n  // const allqueotes = [\n  //   { id: \"1\", author: \"akshay\", text: \"React\" },\n  //   { id: \"2\", author: \"arnab\", text: \"Node\" },\n  //   { id: \"3\", author: \"anirban\", text: \"React  Native\" },\n  // ];\n  // const queotes = allqueotes.find((item) => item.id === params.id);\n  // if (!queotes) {\n  //   return <p>No quests found</p>;\n  // }\n\n  return (\n    <Fragment>\n      <HighlightedQuote\n        text={getSinglequotes.text}\n        author={getSinglequotes.author}\n      />\n      {/* <Route path={`/queots/${params.id}`} exact> */}\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link to={`${match.url}/comments`} className=\"btn--flat\">\n            {/* <Link to={`/queots/${params.id}/comments`} className=\"btn--flat\"> */}\n            Load comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        {/* <Route path={`/queots/${params.id}/comments`}> */}\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QueotesDetails;\n"],"sourceRoot":""}